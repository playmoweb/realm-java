buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {}
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'

def props = new Properties()
props.load(new FileInputStream("${rootDir}/../realm.properties"))
props.each { key, val ->
    project.ext.set(key, val)
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
}

version = file("${projectDir}/../version.txt").text.trim();

configurations {
    provided
    compile.extendsFrom provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation "io.realm:realm-transformer:${version}"
    implementation 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    provided 'com.android.tools.build:gradle:2.1.0'

    testImplementation gradleTestKit()
    testImplementation 'junit:junit:4.12'
}

//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens

task generateVersionClass(type: Copy) {
    from 'src/main/templates/Version.java'
    into 'build/generated-src/main/java/io/realm'
    filter(ReplaceTokens, tokens: [version: version])
    outputs.upToDateWhen { false }
}

// Include the generated Version file
sourceSets {
    main {
        java {
            srcDir 'build/generated-src/main/java'
        }
    }
}

compileJava.dependsOn generateVersionClass

wrapper {
    gradleVersion = project.gradleVersion
}